
<!DOCTYPE html>
<!--
/------------------------------------------------------------------------------\
| Copyright (C) 2012-2013 Leap Motion, Inc. All rights reserved.               |
| Leap Motion proprietary and confidential. Not for distribution.              |
| Use subject to the terms of the Leap Motion SDK Agreement available at       |
| https://developer.leapmotion.com/sdk_agreement, or another agreement         |
| between Leap Motion and you, your company or other organization.             |
\------------------------------------------------------------------------------/
-->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Leap Motion JavaScript Sample</title>
<script src="http://js.leapmotion.com/0.2.0/leap.min.js"></script>
<script>
function mainLoop(){
  // Store frame for motion functions
  var previousFrame = null;
  var paused = false;
  var pauseOnGesture = false;

  // Setup Leap loop with frame callback function
  var controllerOptions = {enableGestures: true};

  Leap.loop(controllerOptions, function(frame) {
    if (paused) {
      return; // Skip this update
    }

    // Display Frame object data
    var frameOutput = document.getElementById("frameData");


    // Display Hand object data
    var handOutput = document.getElementById("handData");
    var handString = "";
    if (frame.hands.length > 0) {
      var count = 0;
      for (var i = 0; i < frame.hands.length; i++) {
        var hand = frame.hands[i];

        handString += "<div style='width:300px; float:left; padding:5px'>";
        handString += "Hand ID: " + hand.id + "<br />";
        handString += "Direction: " + vectorToString(hand.direction, 2) + "<br />";
        handString += "Palm normal: " + vectorToString(hand.palmNormal, 2) + "<br />";
        handString += "Palm position: " + vectorToString(hand.palmPosition) + " mm<br />";
        handString += "Palm velocity: " + vectorToString(hand.palmVelocity) + " mm/s<br />";
        handString += "Sphere center: " + vectorToString(hand.sphereCenter) + " mm<br />";
        handString += "Sphere radius: " + hand.sphereRadius.toFixed(1) + " mm<br />";


        if (hand.palmPosition[1] < 100 || hand.palmPosition[1] > 85){
          count++;
        }


        // Hand motion factors
        if (previousFrame && previousFrame.valid) {
          var translation = hand.translation(previousFrame);
          handString += "Translation: " + vectorToString(translation) + " mm<br />";

          var rotationAxis = hand.rotationAxis(previousFrame, 2);
          var rotationAngle = hand.rotationAngle(previousFrame);
          handString += "Rotation axis: " + vectorToString(rotationAxis) + "<br />";
          handString += "Rotation angle: " + rotationAngle.toFixed(2) + " radians<br />";

          var scaleFactor = hand.scaleFactor(previousFrame);
          handString += "Scale factor: " + scaleFactor.toFixed(2) + "<br />";
        }

        // IDs of pointables (fingers and tools) associated with this hand
        if (hand.pointables.length > 0) {
          var fingerIds = [];
          var toolIds = [];
          for (var j = 0; j < hand.pointables.length; j++) {
            var pointable = hand.pointables[j];
            if (pointable.tool) {
              toolIds.push(pointable.id);
            }
            else {
              fingerIds.push(pointable.id);
            }
          }
          if (fingerIds.length > 0) {
            handString += "Fingers IDs: " + fingerIds.join(", ") + "<br />";
          }
          if (toolIds.length > 0) {
            handString += "Tools IDs: " + toolIds.join(", ") + "<br />";
          }
        }

        handString += "</div>";
      }
    }
    else {
      handString += "No hands";
    }
    handOutput.innerHTML = handString;

    // Display Pointable (finger and tool) object data
    var pointableOutput = document.getElementById("pointableData");
    var pointableString = "";
    if (frame.pointables.length > 0) {
      for (var i = 0; i < frame.pointables.length; i++) {
        var pointable = frame.pointables[i];

        pointableString += "<div style='width:250px; float:left; padding:5px'>";
        pointableString += "Pointable ID: " + pointable.id + "<br />";
        pointableString += "Belongs to hand with ID: " + pointable.handId + "<br />";

        if (pointable.tool) {
          pointableString += "Classified as a tool <br />";
          pointableString += "Length: " + pointable.length.toFixed(1) + " mm<br />";
          pointableString += "Width: "  + pointable.width.toFixed(1) + " mm<br />";
        }
        else {
          pointableString += "Classified as a finger<br />";
          pointableString += "Length: " + pointable.length.toFixed(1) + " mm<br />";
        }

        pointableString += "Direction: " + vectorToString(pointable.direction, 2) + "<br />";
        pointableString += "Tip position: " + vectorToString(pointable.tipPosition) + " mm<br />";
        pointableString += "Tip velocity: " + vectorToString(pointable.tipVelocity) + " mm/s<br />";

        pointableString += "</div>";
      }
    }
    else {
      pointableString += "<div>No pointables</div>";
    }
    pointableOutput.innerHTML = pointableString;

    // Display Gesture object data
    var gestureOutput = document.getElementById("gestureData");
    var gestureString = "";
    if (frame.gestures.length > 0) {
      if (pauseOnGesture) {
        togglePause();
      }
      for (var i = 0; i < frame.gestures.length; i++) {
        var gesture = frame.gestures[i];
          case "swipe":
            var isHorizontal = Math.abs(gesture.direction[0]) > Math.abs(gesture.direction[1]);
             //Classify as right-left or up-down
             if(isHorizontal){
                if(gesture.direction[0] > 0){
                    swipeDirection = "right";
                } else {
                    swipeDirection = "left";
                }
             } else { //vertical
                if(gesture.direction[1] > 0){
                    swipeDirection = "up";
                } else {
                    swipeDirection = "down";
                }                  
            }

            document.getElementById("swipe").innerHTML = swipeDirection;
            break;
        }
        gestureString += "<br />";
      }
    }


      if (frame.fingers.length == 2 || frame.fingers.length == 1){
      document.getElementById("game").innerHTML = "Scissors";
    }
    else if (frame.fingers.length == 0){
        document.getElementById("game").innerHTML = "Rock";
      }
      else if (frame.fingers.length == 5){
        document.getElementById("game").innerHTML = "Paper";
      }

      
      
      return;
    
  })
}
  </script>
 <button onclick="coolFunction()">Start</button>
 <div id="game"></div>
</head>
</html>